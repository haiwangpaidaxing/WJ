//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;
using SimpleJSON;



namespace cfg.Data
{

public sealed partial class LevelData :  Bright.Config.BeanBase 
{
    public LevelData(JSONNode _json) 
    {
        { if(!_json["Describe"].IsString) { throw new SerializationException(); }  Describe = _json["Describe"]; }
        { if(!_json["Gold"].IsNumber) { throw new SerializationException(); }  Gold = _json["Gold"]; }
        { var __json0 = _json["EquipmentDrops"]; if(!__json0.IsArray) { throw new SerializationException(); } EquipmentDrops = new System.Collections.Generic.List<Data.ItemDropData>(__json0.Count); foreach(JSONNode __e0 in __json0.Children) { Data.ItemDropData __v0;  { if(!__e0.IsObject) { throw new SerializationException(); }  __v0 = Data.ItemDropData.DeserializeItemDropData(__e0);  }  EquipmentDrops.Add(__v0); }   }
        PostInit();
    }

    public LevelData(string Describe, int Gold, System.Collections.Generic.List<Data.ItemDropData> EquipmentDrops ) 
    {
        this.Describe = Describe;
        this.Gold = Gold;
        this.EquipmentDrops = EquipmentDrops;
        PostInit();
    }

    public static LevelData DeserializeLevelData(JSONNode _json)
    {
        return new Data.LevelData(_json);
    }

    public string Describe { get; private set; }
    public int Gold { get; private set; }
    public System.Collections.Generic.List<Data.ItemDropData> EquipmentDrops { get; private set; }

    public const int __ID__ = 1067106314;
    public override int GetTypeId() => __ID__;

    public  void Resolve(Dictionary<string, object> _tables)
    {
        foreach(var _e in EquipmentDrops) { _e?.Resolve(_tables); }
        PostResolve();
    }

    public  void TranslateText(System.Func<string, string, string> translator)
    {
        foreach(var _e in EquipmentDrops) { _e?.TranslateText(translator); }
    }

    public override string ToString()
    {
        return "{ "
        + "Describe:" + Describe + ","
        + "Gold:" + Gold + ","
        + "EquipmentDrops:" + Bright.Common.StringUtil.CollectionToString(EquipmentDrops) + ","
        + "}";
    }
    
    partial void PostInit();
    partial void PostResolve();
}
}
